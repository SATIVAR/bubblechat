services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bubblechat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-bubblechat_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bubblechat_pass}
      POSTGRES_DB: ${POSTGRES_DB:-bubblechat}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./packages/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bubblechat-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bubblechat_user} -d ${POSTGRES_DB:-bubblechat}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bubblechat-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass} --appendonly yes --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bubblechat-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Admin Dashboard (Next.js) - Comentado temporariamente
  # admin-dashboard:
  #   build:
  #     context: .
  #     dockerfile: apps/admin-dashboard/Dockerfile
  #   container_name: bubblechat-admin
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3001"
  #   env_file:
  #     - .env.docker
  #   environment:
  #     - NODE_ENV=production
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - bubblechat-network
  #   volumes:
  #     - ./uploads:/app/uploads
  #     - uploads_data:/app/uploads

  # Widget (Next.js) - quando existir
  # widget:
  #   build:
  #     context: .
  #     dockerfile: apps/widget-fab/Dockerfile
  #   container_name: bubblechat-widget
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #   networks:
  #     - bubblechat-network

  # API (Node.js/Express) - quando existir
  # api:
  #   build:
  #     context: .
  #     dockerfile: apps/api/Dockerfile
  #   container_name: bubblechat-api
  #   ports:
  #     - "3002:3002"
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://${POSTGRES_USER:-bubblechat_user}:${POSTGRES_PASSWORD:-bubblechat_pass}@postgres:5432/${POSTGRES_DB:-bubblechat}
  #     - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379
  #   depends_on:
  #     - postgres
  #     - redis
  #   networks:
  #     - bubblechat-network
  #   volumes:
  #     - ./uploads:/app/uploads

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  bubblechat-network:
    driver: bridge