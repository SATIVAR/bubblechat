// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Super Admin (proprietário da aplicação)
model SuperAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admins")
}

// Cliente (empresa que usa a plataforma)
model Client {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL-friendly identifier
  email       String
  phone       String?
  website     String?
  logo        String?
  isActive    Boolean  @default(true)
  settings    Json?    // Configurações específicas do cliente
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  agents      Agent[]
  employees   Employee[]
  documents   Document[]
  products    Product[]
  quotes      Quote[]
  conversations Conversation[]

  @@map("clients")
}

// Funcionário (usuário final do cliente)
model Employee {
  id        String   @id @default(cuid())
  clientId  String
  email     String
  name      String
  role      String   @default("user") // user, admin
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, email])
  @@map("employees")
}

// Agente LLM
model Agent {
  id          String   @id @default(cuid())
  clientId    String
  name        String
  description String?
  isActive    Boolean  @default(true)
  
  // Configurações do LLM
  llmProvider String   // openai, gemini, agno, custom
  llmModel    String   // gpt-4, gemini-pro, etc.
  llmConfig   Json?    // Configurações específicas do modelo
  
  // Ferramentas habilitadas
  enableOCR     Boolean @default(false)
  enablePDF     Boolean @default(false)
  enableExcel   Boolean @default(false)
  enableQuoting Boolean @default(false)
  
  // Configurações de aparência
  avatar      String?
  primaryColor String? @default("#0066ff")
  theme       String  @default("auto") // light, dark, auto
  
  // Prompt e contexto
  systemPrompt String?
  context      String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  client        Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("agents")
}

// Modelo LLM personalizado
model LLMModel {
  id          String   @id @default(cuid())
  name        String
  provider    String   // openai, gemini, agno, custom
  model       String   // Nome do modelo
  apiKey      String?  // Chave de API (criptografada)
  apiUrl      String?  // URL personalizada para modelos custom
  config      Json?    // Configurações adicionais
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("llm_models")
}

// Documento/Arquivo
model Document {
  id          String   @id @default(cuid())
  clientId    String
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String?
  
  // Conteúdo processado
  extractedText String?
  metadata      Json?
  
  // Tipo de processamento
  processType String? // ocr, pdf, excel
  processedAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("documents")
}

// Produto (para orçamentação)
model Product {
  id          String   @id @default(cuid())
  clientId    String
  name        String
  description String?
  category    String?
  price       Decimal  @db.Decimal(10, 2)
  unit        String?  // unidade, kg, m², etc.
  isActive    Boolean  @default(true)
  metadata    Json?    // Informações adicionais
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  quoteItems  QuoteItem[]

  @@map("products")
}

// Conversa
model Conversation {
  id        String   @id @default(cuid())
  clientId  String
  agentId   String
  sessionId String   // ID da sessão do usuário
  title     String?
  status    String   @default("active") // active, closed, archived
  metadata  Json?    // Informações da sessão (IP, user-agent, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  agent     Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  messages  Message[]
  quotes    Quote[]

  @@map("conversations")
}

// Mensagem
model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // user, assistant, system
  content        String
  
  // Anexos
  attachments    Json?    // Array de IDs de documentos
  
  // Feedback
  feedback       String?  // positive, negative
  feedbackNote   String?
  
  // Metadados
  metadata       Json?    // Informações adicionais (tokens, tempo de resposta, etc.)
  
  createdAt      DateTime @default(now())

  // Relacionamentos
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  documents      Document[]

  @@map("messages")
}

// Orçamento
model Quote {
  id             String   @id @default(cuid())
  clientId       String
  conversationId String?
  title          String
  description    String?
  status         String   @default("draft") // draft, sent, approved, rejected
  total          Decimal  @db.Decimal(10, 2)
  validUntil     DateTime?
  notes          String?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  client         Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  items          QuoteItem[]

  @@map("quotes")
}

// Item do orçamento
model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  productId   String?
  name        String
  description String?
  quantity    Decimal  @db.Decimal(10, 3)
  unitPrice   Decimal  @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  order       Int      @default(0)

  // Relacionamentos
  quote       Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id])

  @@map("quote_items")
}

// Log de atividades
model ActivityLog {
  id        String   @id @default(cuid())
  entityType String  // client, agent, conversation, etc.
  entityId   String
  action     String  // create, update, delete, etc.
  details    Json?
  userId     String? // ID do usuário que executou a ação
  userType   String? // super_admin, employee
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("activity_logs")
}