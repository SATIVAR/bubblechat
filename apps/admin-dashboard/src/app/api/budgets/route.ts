import { NextResponse } from 'next/server'
import { prisma } from '@bubblechat/database'

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url)
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '10')
    const status = searchParams.get('status')
    const clientId = searchParams.get('clientId')

    const skip = (page - 1) * limit

    // Construir filtros
    const where: any = {}
    if (status) where.status = status
    if (clientId) where.clientId = clientId

    // Buscar orçamentos com paginação
    const [budgets, total] = await Promise.all([
      prisma.budget.findMany({
        where,
        skip,
        take: limit,
        include: {
          client: {
            select: {
              id: true,
              name: true,
              email: true,
              company: true
            }
          },
          document: {
            select: {
              id: true,
              originalName: true,
              mimeType: true
            }
          },
          items: true,
          _count: {
            select: {
              items: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      }),
      prisma.budget.count({ where })
    ])

    // Adicionar estatísticas calculadas
    const budgetsWithStats = budgets.map(budget => ({
      ...budget,
      stats: {
        itemsCount: budget._count.items,
        averageItemValue: budget.items.length > 0 
          ? budget.items.reduce((sum, item) => sum + item.totalPrice, 0) / budget.items.length
          : 0,
        formattedValue: new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(budget.value),
        daysOld: Math.floor((Date.now() - budget.createdAt.getTime()) / (1000 * 60 * 60 * 24))
      }
    }))

    return NextResponse.json({
      budgets: budgetsWithStats,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    })
  } catch (error) {
    console.error('Erro ao buscar orçamentos:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { title, description, clientId, documentId, items } = body

    // Validar dados obrigatórios
    if (!title || !clientId || !items || items.length === 0) {
      return NextResponse.json(
        { error: 'Título, cliente e itens são obrigatórios' },
        { status: 400 }
      )
    }

    // Calcular valor total
    const totalValue = items.reduce((sum: number, item: any) => {
      return sum + (item.quantity * item.unitPrice)
    }, 0)

    // Criar orçamento com itens
    const budget = await prisma.budget.create({
      data: {
        title,
        description,
        value: totalValue,
        clientId,
        documentId,
        status: 'DRAFT',
        items: {
          create: items.map((item: any) => ({
            description: item.description,
            quantity: item.quantity,
            unitPrice: item.unitPrice,
            totalPrice: item.quantity * item.unitPrice
          }))
        },
        metadata: {
          createdBy: 'admin', // TODO: Pegar do contexto de autenticação
          autoGenerated: !!documentId
        }
      },
      include: {
        client: {
          select: {
            id: true,
            name: true,
            email: true,
            company: true
          }
        },
        document: {
          select: {
            id: true,
            originalName: true
          }
        },
        items: true
      }
    })

    return NextResponse.json(budget, { status: 201 })
  } catch (error) {
    console.error('Erro ao criar orçamento:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

// Endpoint para atualizar status do orçamento
export async function PATCH(request: Request) {
  try {
    const body = await request.json()
    const { id, status } = body

    if (!id || !status) {
      return NextResponse.json(
        { error: 'ID e status são obrigatórios' },
        { status: 400 }
      )
    }

    const validStatuses = ['DRAFT', 'SENT', 'APPROVED', 'REJECTED']
    if (!validStatuses.includes(status)) {
      return NextResponse.json(
        { error: 'Status inválido' },
        { status: 400 }
      )
    }

    const budget = await prisma.budget.update({
      where: { id },
      data: { 
        status,
        updatedAt: new Date()
      },
      include: {
        client: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        items: true
      }
    })

    return NextResponse.json(budget)
  } catch (error) {
    console.error('Erro ao atualizar orçamento:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}