const { Client } = require('pg');
const redis = require('redis');
require('dotenv').config();

async function testPostgreSQL() {
  console.log('üîç Testando conex√£o PostgreSQL...');
  console.log('üì° URL:', process.env.DATABASE_URL);
  
  const client = new Client({
    connectionString: process.env.DATABASE_URL
  });

  try {
    await client.connect();
    console.log('‚úÖ PostgreSQL conectado com sucesso!');
    
    // Teste de cria√ß√£o de tabela
    await client.query(`
      CREATE TABLE IF NOT EXISTS test_persistence (
        id SERIAL PRIMARY KEY,
        message TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);
    
    // Inserir dados de teste
    await client.query(
      'INSERT INTO test_persistence (message) VALUES ($1)',
      [`Teste de persist√™ncia - ${new Date().toISOString()}`]
    );
    
    // Verificar dados
    const result = await client.query('SELECT COUNT(*) as total FROM test_persistence');
    console.log('üìä Total de registros na tabela de teste:', result.rows[0].total);
    
    // Mostrar √∫ltimos registros
    const recent = await client.query(
      'SELECT * FROM test_persistence ORDER BY created_at DESC LIMIT 3'
    );
    console.log('üìù √öltimos registros:');
    recent.rows.forEach((row, index) => {
      console.log(`  ${index + 1}. ${row.message} (${row.created_at})`);
    });
    
    await client.end();
  } catch (error) {
    console.error('‚ùå Erro ao conectar PostgreSQL:', error.message);
    console.error('üîß Detalhes:', error);
  }
}

async function testRedis() {
  console.log('üîç Testando conex√£o Redis...');
  console.log('üì° URL:', process.env.REDIS_URL);
  
  const client = redis.createClient({
    url: process.env.REDIS_URL
  });

  client.on('error', (err) => {
    console.error('‚ùå Erro Redis:', err);
  });

  try {
    await client.connect();
    console.log('‚úÖ Redis conectado com sucesso!');
    
    // Teste de persist√™ncia
    const testKey = 'test_persistence';
    const currentCount = await client.get(testKey) || '0';
    const newCount = parseInt(currentCount) + 1;
    
    await client.set(testKey, newCount.toString());
    console.log('üî¢ Contador de testes:', newCount);
    
    // Teste de hash
    const hashKey = 'test_session';
    await client.hSet(hashKey, {
      user: 'test_user',
      timestamp: new Date().toISOString(),
      count: newCount.toString()
    });
    
    const hashData = await client.hGetAll(hashKey);
    console.log('üìã Dados da sess√£o:', hashData);
    
    // Verificar TTL
    await client.expire(hashKey, 3600); // 1 hora
    const ttl = await client.ttl(hashKey);
    console.log('‚è±Ô∏è  TTL da sess√£o:', ttl, 'segundos');
    
    await client.disconnect();
  } catch (error) {
    console.error('‚ùå Erro ao conectar Redis:', error.message);
    console.error('üîß Detalhes:', error);
  }
}

async function testDockerServices() {
  console.log('üê≥ Verificando servi√ßos Docker...');
  
  const { execSync } = require('child_process');
  
  try {
    const containers = execSync('docker-compose ps --format json', { encoding: 'utf8' });
    const services = containers.trim().split('\n').map(line => JSON.parse(line));
    
    console.log('üì¶ Status dos containers:');
    services.forEach(service => {
      const status = service.State === 'running' ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${service.Service}: ${service.State}`);
    });
  } catch (error) {
    console.log('‚ö†Ô∏è  Docker Compose n√£o est√° rodando ou n√£o foi encontrado');
  }
}

async function main() {
  console.log('üöÄ Iniciando testes de conex√£o e persist√™ncia...\n');
  
  await testDockerServices();
  console.log('');
  
  await testPostgreSQL();
  console.log('');
  
  await testRedis();
  
  console.log('\n‚ú® Testes conclu√≠dos!');
  console.log('\nüí° Dicas:');
  console.log('  - Se os dados n√£o persistem, verifique os volumes Docker');
  console.log('  - Execute "node docker-scripts.js status" para ver o status dos containers');
  console.log('  - Execute "node docker-scripts.js logs" para ver os logs em tempo real');
}

main().catch(console.error);